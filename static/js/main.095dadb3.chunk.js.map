{"version":3,"sources":["components/CoolBackground/CoolBackground.tsx","components/MainButtons.tsx","consts.tsx","components/AvatarBar.tsx","utils/foodPicker.tsx","components/Cells/FoodCell.tsx","components/Cells/HeadCell.tsx","components/Cells/TailCell.tsx","components/Cells/StandardCell.tsx","components/Controller.tsx","components/GameOverModal.tsx","utils/createBoard.tsx","context.tsx","custom-hooks/useCountdown.ts","utils/SingleLinkedList.ts","utils/snake/snake-coordination.ts","custom-hooks/useSnakeMovement.ts","containers/Game.tsx","utils/generateRandomNum.ts","utils/snake/initializers.ts","utils/snake/calculateSnakeSpeed.ts","custom-hooks/useSetInterval.ts","components/Instructions/Effect.tsx","components/Instructions/Instructions.tsx","components/Settings/Setting.tsx","components/Settings/SettingsButton.tsx","components/Settings/Settings.tsx","containers/Menu.tsx","App.tsx","reportWebVitals.ts","theme.ts","index.tsx","components/CoolBackground/CoolBackground.module.css"],"names":["CoolBackground","className","styles","lines","line","MainButtons","isPlaying","btnRef","handleSound","pos","left","bottom","aria-label","icon","variant","size","fontSize","onClick","ref","_hover","color","transform","_focus","_active","disabled","bg","SNAKE_SPEED","BOARD_SIZE","AvatarBar","effects","untilNextFood","score","top","h","w","align","p","borderRadius","boxShadow","mb","name","src","mr","pl","as","fontWeight","spacing","map","effect","imageSrc","food","d","alignItems","flexDirection","duration","Infinity","foodPicker","image","imageStyle","m","FoodCell","createRotationStyle","deg","HeadCell","style","borderRightRadius","direction","DIRECTION","UP","DOWN","LEFT","TailCell","nextDirection","borderLeftRadius","directionForStyle","isTransitional","undefined","StandardCell","borderTopRightRadius","RIGHT","borderBottomRightRadius","Controller","changeDirection","currentDirection","right","border","borderColor","arrow","ArrowBack","ArrowUp","ArrowForward","ArrowDown","index","activeStyle","justify","userSelect","cursor","margin","_odd","_even","transition","GameOverModal","isOpen","onClose","onPlayAgain","onMenuClick","closeOnOverlayClick","isCentered","returnFocusOnClose","autoFocus","textAlign","pb","rightIcon","Repeat","createBoard","boardSize","rowsAndCells","Math","sqrt","board","cellNumber","push","Array","fill","MainContext","createContext","setBoardSize","musicVolume","setMusicVolume","snakeSpeed","setSnakeSpeed","disableController","toggleControllerHandler","mute","toggleMute","playGame","togglePlayGame","useCountdown","initialCount","onCountdownComplete","useState","count","setCount","callBackRef","useRef","useEffect","current","interval","setInterval","clearInterval","resetCount","cancelCountdown","Node","data","nextNode","next","this","SingleLinkedList","node","head","tail","add","find","condition","currentNode","previousNode","reverse","onReverse","previous","temp","moveList","newHead","deque","print","str","JSON","stringify","console","log","getOppositeDirection","getNextNodeForDirection","nextNodeCoords","row","cell","getNextNodeCoordsForDirection","value","generateRandomNum","min","max","floor","random","getInitialSnakeCell","length","getFoodCell","getFoodType","randomNum","Game","useContext","initialSnakeSpeed","snakeRef","Set","snakeCells","setSnakeCells","initialDirection","setDirection","directionRef","snakeCellsSizeRef","onKeyDown","e","key","toLocaleLowerCase","_setDirection","window","addEventListener","removeEventListener","_direction","withCheck","useSnakeMovement","setScore","foodCell","setFoodCell","steroidConsumedRef","gameOver","newSnakeCells","removeCellsNumber","removedTail","snake","delete","steroidEffectDuration","resetSteroidEffectDuration","cancelSteroidEffectDuration","reverseSnake","creatineEffectDuration","resetCreatineEffectDuration","cancelCreatineEffectDuration","useDisclosure","openModal","onOpen","closeModal","generateFoodCell","resetFoodDuration","foodDuration","cancelFoodDuration","snakeFoodConsumed","cellRef","getSnakeSpeedOnRoids","getSnakeSpeedOnCreatine","callback","delay","savedCallback","id","useSetInterval","moveSnake","gameOverHandler","isOutOfBounds","newNode","has","consumeFood","growSnake","oppositeDirOfTail","newTailNode","effectsArr","zIndex","outline","outlineColor","cellType","snakeTailDirection","snakeTailNextDirection","match","clientWidth","flex","newFoodCell","reversedNode","nextNodeDirection","currentNodeDirection","Effect","rules","textTransform","listStylePosition","listStyleType","rule","parse","Instructions","scrollBehavior","css","textIndent","Setting","settingName","children","flexDir","py","SettingsButton","isActive","Settings","ctx","colorScheme","isFitted","onChange","isChecked","defaultValue","boxSize","MdGraphicEq","Menu","React","memo","onPlayGame","isOpenSettings","openSettings","closeSettings","commonButtonStyle","maxW","App","localStorage","getItem","settings","setSettings","setPlayGame","useSound","volume","play","stop","playBlopSound","playBtnRef","timeout","setTimeout","click","clearTimeout","saveSettings","setItem","component","minH","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","colors","primary","main","app","StrictMode","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.095dadb3.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './CoolBackground.module.css';\n\nexport const CoolBackground: React.FC = () => {\n  return (\n    <div className={styles.lines}>\n      <div className={styles.line}></div>\n      <div className={styles.line}></div>\n      <div className={styles.line}></div>\n    </div>\n  );\n};\n","import { HStack, IconButton } from '@chakra-ui/react';\nimport React from 'react';\nimport { BsBellFill, BsTrophy } from 'react-icons/bs';\n\ninterface MainButtonsProps {\n  handleSound: any;\n  btnRef: any;\n  isPlaying: boolean;\n}\n\nexport const MainButtons: React.FC<MainButtonsProps> = ({\n  isPlaying,\n  btnRef,\n  handleSound,\n}) => {\n  return (\n    <HStack pos='absolute' left={6} bottom={6}>\n      <IconButton\n        aria-label='leaderboard'\n        icon={<BsBellFill />}\n        variant='ghost'\n        size='lg'\n        fontSize='37px'\n        // disabled\n        onClick={handleSound}\n        ref={btnRef}\n        _hover={{\n          color: 'red',\n          transform: 'scale(1.05) rotate(-5deg)',\n        }}\n        _focus={{}}\n        _active={{}}\n        color={isPlaying ? 'white' : 'red'}\n      />\n      <IconButton\n        aria-label='leaderboard'\n        icon={<BsTrophy />}\n        variant='ghost'\n        size='lg'\n        fontSize='40px'\n        disabled\n        _hover={{\n          bg: 'none',\n          transform: 'scale(1.05)',\n        }}\n      />\n    </HStack>\n  );\n};\n","// miliseconds\nexport const SNAKE_SPEED = 750;\nexport const SNAKE_SPEED_MEDIUM = SNAKE_SPEED * 0.8;\nexport const SNAKE_SPEED_HIGH = SNAKE_SPEED * 0.6;\nexport const SNAKE_SPEED_ON_ROIDS = SNAKE_SPEED * 0.5;\nexport const SNAKE_SPEED_ON_CREATINE = SNAKE_SPEED * 0.8;\n// seconds\nexport const FOOD_DURATION = 10;\nexport const STEROID_EFFECT_DURATION = 15;\nexport const CREATINE_EFFECT_DURATION = 20;\n// board size\nexport const BOARD_SIZE = 10 * 10;\nexport const BOARD_SIZE_MEDIUM = 12 * 12;\nexport const BOARD_SIZE_HIGH = 15 * 15;\n","import {\n  Avatar,\n  Box,\n  Flex,\n  HStack,\n  VStack,\n  Image,\n  Text,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { FoodType } from '../containers/Game';\n\ninterface AvatarBarProps {\n  effects: {\n    food: FoodType;\n    duration: number | null;\n  }[];\n  score: number;\n  untilNextFood: number;\n}\n\nexport const AvatarBar: React.FC<AvatarBarProps> = ({\n  effects,\n  untilNextFood,\n  score,\n}) => {\n  return (\n    <Box pos='absolute' left={1} top={4} h='110px'>\n      <Flex\n        w='300px'\n        align='center'\n        bg='blackAlpha.500'\n        p={2}\n        borderRadius='md'\n        boxShadow='md'\n        mb={2}\n      >\n        <Avatar size='lg' name='Snake Avatar' src='/img/avatar.png' mr={2} />\n        <VStack w='100%'>\n          <Box bg='green.500' w='100%' borderRadius='lg' pl={2}>\n            Score:{' '}\n            <Text as='span' fontWeight='bold'>\n              {score}\n            </Text>\n          </Box>\n          <Box bg='blue.500' w='100%' borderRadius='lg' pl={2}>\n            Next food in:{' '}\n            <Text as='span' fontWeight='bold'>\n              {untilNextFood}\n            </Text>\n          </Box>\n        </VStack>\n      </Flex>\n      <HStack pl={'28%'} spacing={3}>\n        {effects.map((effect) => {\n          let imageSrc = '/img/';\n          switch (effect.food) {\n            case 'steroid':\n              imageSrc = imageSrc + 'roid.png';\n              break;\n            case 'creatine':\n              imageSrc = imageSrc + 'creatine.webp';\n              break;\n            case 'meat':\n              imageSrc = imageSrc + 'meat.png';\n              break;\n            default:\n              imageSrc = imageSrc + 'protein.webp';\n              break;\n          }\n\n          return (\n            <Box\n              d='flex'\n              alignItems='center'\n              flexDirection='column'\n              key={effect.food}\n            >\n              <Image src={imageSrc} w='25px' h='25px' />\n              <Text fontSize='xs'>\n                {effect.duration === Infinity ? '∞' : `${effect.duration}s`}\n              </Text>\n            </Box>\n          );\n        })}\n      </HStack>\n    </Box>\n  );\n};\n","import { Image, ImageProps } from '@chakra-ui/react';\nimport React from 'react';\n\nexport function foodPicker(\n  food: string,\n  imageStyle: ImageProps = {\n    w: '65%',\n    h: '65%',\n    m: 'auto',\n  }\n) {\n  let image: any;\n  switch (food) {\n    case 'meat':\n      image = <Image src='/img/meat.png' {...imageStyle} />;\n      break;\n    case 'creatine':\n      image = <Image src='/img/creatine.webp' {...imageStyle} />;\n      break;\n    case 'protein':\n      image = <Image src='/img/protein.webp' {...imageStyle} />;\n      break;\n    default:\n      image = <Image src='/img/roid.png' {...imageStyle} />;\n      break;\n  }\n  return image;\n}\n","import { Box } from '@chakra-ui/react';\nimport React from 'react';\nimport { FoodType } from '../../containers/Game';\nimport { foodPicker } from '../../utils/foodPicker';\n\ninterface FoodCellProps {\n  food: FoodType;\n}\n\nexport const FoodCell: React.FC<FoodCellProps> = ({ food }) => {\n  let image = foodPicker(food);\n  return (\n    <Box w='100%' h='100%' d='flex'>\n      {image}\n    </Box>\n  );\n};\n","import { Box, BoxProps } from '@chakra-ui/layout';\nimport React from 'react';\nimport { DIRECTION } from '../../containers/Game';\n\ninterface HeadCellProps {\n  direction: DIRECTION;\n}\n\nconst createRotationStyle = (deg: number) => {\n  return `rotate(${deg}deg)`;\n};\n\nexport const HeadCell: React.FC<HeadCellProps> = ({ direction }) => {\n  const style: BoxProps = {\n    borderRightRadius: '2xl',\n  };\n  switch (direction) {\n    case DIRECTION.UP:\n      style.transform = createRotationStyle(270);\n      break;\n    case DIRECTION.DOWN:\n      style.transform = createRotationStyle(90);\n      break;\n    case DIRECTION.LEFT:\n      style.transform = createRotationStyle(180);\n      break;\n    default:\n      style.transform = createRotationStyle(0);\n      break;\n  }\n\n  return (\n    <Box w='100%' h='100%' bg='green.500' {...style}>\n      hair\n    </Box>\n  );\n};\n","import { Box, BoxProps } from '@chakra-ui/layout';\nimport React from 'react';\nimport { DIRECTION } from '../../containers/Game';\n\ninterface TailCellProps {\n  direction: DIRECTION;\n  nextDirection?: DIRECTION;\n  isTransitional: boolean;\n}\n\nexport const createRotationStyle = (deg: number) => {\n  return `rotate(${deg}deg)`;\n};\n\nexport const TailCell: React.FC<TailCellProps> = ({\n  direction,\n  nextDirection,\n  isTransitional,\n}) => {\n  const style: BoxProps = {\n    borderLeftRadius: 'full',\n  };\n\n  let directionForStyle = direction;\n  if (isTransitional && nextDirection !== undefined) {\n    directionForStyle = nextDirection;\n  }\n\n  switch (directionForStyle) {\n    case DIRECTION.UP:\n      style.transform = createRotationStyle(270);\n      break;\n    case DIRECTION.DOWN:\n      style.transform = createRotationStyle(90);\n      break;\n    case DIRECTION.LEFT:\n      style.transform = createRotationStyle(180);\n      break;\n    default:\n      style.transform = createRotationStyle(0);\n      break;\n  }\n\n  return (\n    <Box w='100%' h='100%' bg='green.500' {...style}>\n      tail\n    </Box>\n  );\n};\n","import { Box, BoxProps } from '@chakra-ui/react';\nimport React from 'react';\nimport { DIRECTION } from '../../containers/Game';\nimport { createRotationStyle } from './TailCell';\n\ninterface StandardCellProps {\n  direction?: DIRECTION;\n  nextDirection?: DIRECTION;\n  isTransitional?: boolean;\n}\n\nexport const StandardCell: React.FC<StandardCellProps> = ({\n  isTransitional,\n  direction,\n  nextDirection,\n}) => {\n  const style: BoxProps = {};\n\n  if (isTransitional) {\n    style.borderRightRadius = 'full';\n\n    switch (direction) {\n      case DIRECTION.UP:\n        style.transform = createRotationStyle(270);\n\n        // Instead of borderRadius i can add pictures\n        if (nextDirection === DIRECTION.LEFT) {\n          style.borderTopRightRadius = 'unset';\n        } else if (nextDirection === DIRECTION.RIGHT) {\n          style.borderBottomRightRadius = 'unset';\n        }\n        break;\n\n      case DIRECTION.DOWN:\n        style.transform = createRotationStyle(90);\n\n        if (nextDirection === DIRECTION.LEFT) {\n          style.borderBottomRightRadius = 'unset';\n        } else if (nextDirection === DIRECTION.RIGHT) {\n          style.borderTopRightRadius = 'unset';\n        }\n        break;\n      case DIRECTION.LEFT:\n        style.transform = createRotationStyle(180);\n\n        if (nextDirection === DIRECTION.UP) {\n          style.borderBottomRightRadius = 'unset';\n        } else if (nextDirection === DIRECTION.DOWN) {\n          style.borderTopRightRadius = 'unset';\n        }\n        break;\n      default:\n        //   case DIRECTION.RIGHT:\n        style.transform = createRotationStyle(0);\n\n        if (nextDirection === DIRECTION.UP) {\n          style.borderTopRightRadius = 'unset';\n        } else if (nextDirection === DIRECTION.DOWN) {\n          style.borderBottomRightRadius = 'unset';\n        }\n        break;\n    }\n  }\n\n  return <Box w='100%' h='100%' bg='green.500' {...style}></Box>;\n};\n","import {\n  ArrowBackIcon,\n  ArrowDownIcon,\n  ArrowForwardIcon,\n  ArrowUpIcon,\n} from '@chakra-ui/icons';\nimport { Box, Button, ButtonProps } from '@chakra-ui/react';\nimport React from 'react';\nimport { DIRECTION } from '../containers/Game';\n\ninterface ControllerProps {\n  changeDirection: (direction: DIRECTION) => any;\n  currentDirection: DIRECTION;\n}\n\nexport const Controller: React.FC<ControllerProps> = ({\n  changeDirection,\n  currentDirection,\n}) => {\n  return (\n    <Box pos='absolute' right={14} bottom={14}>\n      <Box\n        pos='relative'\n        bg='primary.main'\n        boxShadow='xl'\n        border='1px solid white'\n        borderColor='primary.borderColor'\n        w='250px'\n        h='120px'\n        borderRadius='full'\n      >\n        {[\n          {\n            direction: DIRECTION.LEFT,\n            arrow: <ArrowBackIcon />,\n          },\n          {\n            direction: DIRECTION.UP,\n            arrow: <ArrowUpIcon />,\n          },\n          {\n            direction: DIRECTION.RIGHT,\n            arrow: <ArrowForwardIcon />,\n          },\n          {\n            direction: DIRECTION.DOWN,\n            arrow: <ArrowDownIcon />,\n          },\n        ].map((arrow, index) => {\n          const activeStyle: ButtonProps = {};\n          if (arrow.direction === currentDirection) {\n            activeStyle.border = '1px solid red';\n            activeStyle.transform = 'scale(1.05)';\n          }\n          return (\n            <Button\n              key={arrow.direction}\n              d='flex'\n              justify='center'\n              align='center'\n              fontSize='4rem'\n              pos='absolute'\n              bg='primary.main'\n              border='1px solid white'\n              userSelect='none'\n              cursor='pointer'\n              borderRadius='full'\n              w='100px'\n              h='100px'\n              margin='auto'\n              _odd={{\n                left: index === 0 ? -12 : 'auto',\n                right: index === 2 ? -12 : 'auto',\n                bottom: 0,\n                top: 0,\n              }}\n              _even={{\n                top: index === 1 ? -12 : 'auto',\n                bottom: index === 3 ? -12 : 'auto',\n                left: 0,\n                right: 0,\n              }}\n              transition='all 0.2s'\n              _hover={{\n                transform: 'scale(1.05)',\n              }}\n              _focus={{}}\n              _active={{}}\n              onClick={() => changeDirection(arrow.direction)}\n              {...activeStyle}\n            >\n              {arrow.arrow}\n            </Button>\n          );\n        })}\n      </Box>\n    </Box>\n  );\n};\n","import { RepeatIcon } from '@chakra-ui/icons';\nimport {\n  Button,\n  Flex,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n} from '@chakra-ui/react';\nimport React from 'react';\n\ninterface GameOverModalProps {\n  isOpen: boolean;\n  onClose: (...args: any) => any;\n  score: number;\n  onPlayAgain?: (...args: any) => any;\n  onMenuClick?: (...args: any) => any;\n}\n\nexport const GameOverModal: React.FC<GameOverModalProps> = ({\n  isOpen,\n  onClose,\n  score,\n  onPlayAgain,\n  onMenuClick,\n}) => {\n  return (\n    <Modal\n      closeOnOverlayClick={false}\n      isOpen={isOpen}\n      onClose={onClose}\n      isCentered\n      returnFocusOnClose={false}\n      autoFocus={false}\n    >\n      <ModalOverlay />\n      <ModalContent\n        bg='primary.main'\n        color='white'\n        boxShadow='lg'\n        borderRadius='md'\n        border='1px solid #ffffff0a'\n      >\n        <ModalHeader textAlign='center' fontSize='3xl'>\n          Game Over\n        </ModalHeader>\n        <ModalBody pb={6}>\n          <Text textAlign='center' mb={6} fontWeight={600} fontSize='2xl'>\n            Your max score is: {score}\n          </Text>\n          <Flex direction='column'>\n            <Button\n              mb={2}\n              bg='red.800'\n              transition='all 0.2s'\n              _hover={{\n                bg: 'red.700',\n              }}\n              _active={{}}\n              _focus={{}}\n              onClick={onMenuClick}\n            >\n              Menu\n            </Button>\n            <Button\n              rightIcon={<RepeatIcon />}\n              bg='red.800'\n              transition='all 0.2s'\n              _hover={{\n                bg: 'red.700',\n              }}\n              onClick={onPlayAgain}\n              _active={{}}\n              _focus={{}}\n            >\n              Play Again\n            </Button>\n          </Flex>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n","/* eslint-disable */\nexport const createBoard = (boardSize: number) => {\n  // Get the number of rows/cells\n  const rowsAndCells = Math.sqrt(boardSize);\n\n  const board = [];\n  let cellNumber = 0;\n  for (let index = 0; index < rowsAndCells; index++) {\n    board.push(\n      new Array(rowsAndCells).fill(null).map(() => {\n        cellNumber += 1;\n        return cellNumber;\n      })\n    );\n  }\n\n  return board;\n};\n","import { createContext } from 'react';\nimport { BOARD_SIZE, SNAKE_SPEED } from './consts';\nimport { createBoard } from './utils/createBoard';\n\nexport type ContextType = {\n  snakeSpeed: number;\n  // Value will be LOW, MEDIUM OR HIGH\n  setSnakeSpeed: (value: number) => any;\n\n  board: number[][];\n  boardSize: number;\n  setBoardSize: (value: number) => any;\n\n  musicVolume: number;\n  setMusicVolume: (value: number) => any;\n\n  disableController: boolean;\n  toggleControllerHandler: () => any;\n\n  mute: boolean;\n  toggleMute: () => any;\n\n  playGame: boolean;\n  togglePlayGame: () => any;\n};\n\nexport const MainContext = createContext<ContextType>({\n  boardSize: BOARD_SIZE,\n  setBoardSize: () => {},\n  musicVolume: 1,\n  setMusicVolume: () => {},\n  snakeSpeed: SNAKE_SPEED,\n  setSnakeSpeed: () => {},\n  disableController: false,\n  toggleControllerHandler: () => {},\n  mute: false,\n  toggleMute: () => {},\n  playGame: false,\n  togglePlayGame: () => {},\n  board: createBoard(BOARD_SIZE),\n});\n","import { useEffect, useRef, useState } from 'react';\n\nexport const useCountdown = (\n  initialCount: number,\n  onCountdownComplete?: () => any\n) => {\n  const [count, setCount] = useState(initialCount);\n  const callBackRef = useRef<typeof onCountdownComplete>();\n\n  useEffect(() => {\n    callBackRef.current = onCountdownComplete;\n  }, [onCountdownComplete]);\n\n  useEffect(() => {\n    if (count > 0) {\n      const interval = setInterval(() => {\n        setCount(count - 1);\n      }, 1000);\n\n      return () => {\n        clearInterval(interval);\n      };\n    } else if (callBackRef.current) {\n      callBackRef.current();\n    }\n  }, [count]);\n\n  const resetCount = (count?: number) => setCount(count ? count : initialCount);\n\n  const cancelCountdown = () => setCount(0);\n\n  return {\n    count,\n    resetCount,\n    cancelCountdown,\n  };\n};\n","export class Node<DataType = any> {\n  next: Node<DataType> | null;\n  data?: DataType;\n\n  constructor(data: DataType, nextNode: Node | null = null) {\n    this.data = data;\n    this.next = nextNode;\n  }\n}\n\nexport class SingleLinkedList<DataType = any> {\n  head: Node<DataType> | null;\n  tail: Node<DataType> | null;\n\n  constructor(node: Node<DataType> | null = null) {\n    this.head = node;\n    this.tail = node;\n  }\n\n  // O(1)\n  add = (node: Node<DataType>) => {\n    if (this.head) {\n      this.head.next = node;\n      this.head = node;\n    } else {\n      this.head = node;\n    }\n  };\n\n  // Finds the wanted node by certain condition and return previous, next and current node\n  // O(n)\n  find = (condition: (node: Node<DataType>) => boolean) => {\n    let currentNode = this.tail;\n    let previousNode = null;\n\n    if (this.tail?.next) {\n      while (currentNode !== null) {\n        if (condition(currentNode)) {\n          return {\n            currentNode,\n            nextNode: currentNode.next,\n            previousNode,\n          };\n        }\n\n        previousNode = currentNode;\n        currentNode = currentNode.next;\n      }\n\n      // return false;\n    } else {\n      return {\n        currentNode: this.tail!,\n        nextNode: this.tail!,\n        previousNode: this.tail!,\n      };\n    }\n  };\n\n  // O(n)\n  reverse = (onReverse?: (node: Node<DataType>) => any) => {\n    let current = this.tail!;\n    let previous = null;\n    while (true) {\n      // Callback function to manipulate the data inside each node on reverse\n      if (onReverse) {\n        onReverse(current);\n      }\n\n      const temp = current!.next;\n      current!.next = previous;\n\n      //   If i'm at head\n      if (temp === null) {\n        this.tail = current;\n        break;\n      }\n\n      if (previous === null) {\n        this.head = current;\n      }\n\n      previous = current;\n      current = temp!;\n    }\n  };\n\n  //   Special method, not common for ;inkedList\n  // O(1)\n  moveList = (newHead: Node) => {\n    //   Update head\n    this.head!.next = newHead;\n    this.head! = this.head!.next;\n\n    //   Update tail\n    this.tail = this.tail!.next;\n    if (!this.tail) {\n      this.tail = this.head;\n    }\n  };\n\n  // QUEUE methods\n  // O(1)\n  deque = () => {\n    const temp = this.tail!;\n\n    // If tail is not the head\n    if (this.tail?.next) {\n      this.tail = this.tail.next!;\n    }\n\n    return temp;\n  };\n\n  // O(n)\n  print = () => {\n    let current = this.tail;\n    let str = '';\n    while (current) {\n      str += str\n        ? `->${JSON.stringify(current.data, null, 2)}`\n        : JSON.stringify(current.data, null, 2);\n      current = current.next;\n    }\n    console.log(str);\n    return str;\n  };\n}\n","import { DIRECTION, CellData } from '../../containers/Game';\nimport { Node, SingleLinkedList } from '../SingleLinkedList';\n\nexport function getNextNodeCoordsForDirection(\n  node: Node,\n  direction: DIRECTION\n) {\n  switch (direction) {\n    case DIRECTION.RIGHT:\n      return {\n        row: node.data.row,\n        cell: node.data.cell + 1,\n      };\n    case DIRECTION.LEFT:\n      return {\n        row: node.data.row,\n        cell: node.data.cell - 1,\n      };\n    case DIRECTION.UP:\n      return {\n        cell: node.data.cell,\n        row: node.data.row - 1,\n      };\n    default:\n      // case DIRECTION.DOWN\n      return {\n        cell: node.data.cell,\n        row: node.data.row + 1,\n      };\n  }\n}\n\n// workaround: store every direction in the snake node data\nexport function getDirectionForNode(node: Node<CellData>) {\n  if (!node.next) return null;\n  const { row, cell } = node.data!;\n  const { row: nextRow, cell: nextCell } = node.next.data!;\n\n  if (row === nextRow && cell + 1 === nextCell) return DIRECTION.RIGHT;\n  if (row === nextRow && cell - 1 === nextCell) return DIRECTION.LEFT;\n  if (row - 1 === nextRow && cell === nextCell) return DIRECTION.UP;\n  if (row + 1 === nextRow && cell === nextCell) return DIRECTION.DOWN;\n}\n\nexport function getOppositeDirection(direction: DIRECTION) {\n  if (direction === DIRECTION.LEFT) return DIRECTION.RIGHT;\n  if (direction === DIRECTION.RIGHT) return DIRECTION.LEFT;\n  if (direction === DIRECTION.DOWN) return DIRECTION.UP;\n  // if (direction === DIRECTION.UP) return DIRECTION.DOWN;\n  return DIRECTION.DOWN;\n}\n\n// function getNextNodeCoordsForDirection(node: Node, direction: DIRECTION) {}\n\nexport function getNextNodeForDirection(\n  node: Node<CellData>,\n  direction: DIRECTION,\n  board: number[][]\n) {\n  const nextNodeCoords = getNextNodeCoordsForDirection(node, direction);\n  return new Node<CellData>({\n    ...nextNodeCoords,\n    // TODO: HANDLE THIS BETTER\n    value: board[nextNodeCoords.row]?.[nextNodeCoords.cell],\n    direction,\n  });\n}\n\n// Move forward with the snake\nexport function changeDirection(\n  newHead: Node,\n  snake: SingleLinkedList<CellData>,\n  snakeCells: Set<number>\n) {\n  // Check if it's out of bound. The newHead.data.value will be undefined, or you can check by checking the length of border etc..\n  const newSnakeCells = new Set(snakeCells);\n  newSnakeCells.delete(snake.tail!.data!.value);\n  newSnakeCells.add(newHead.data.value);\n\n  snake.moveList(newHead);\n\n  return newSnakeCells;\n}\n","import { useEffect, useRef, useState } from 'react';\nimport { DIRECTION } from '../containers/Game';\nimport { getOppositeDirection } from '../utils/snake/snake-coordination';\n\nexport const useSnakeMovement = (initialDirection: DIRECTION) => {\n  const [direction, setDirection] = useState<DIRECTION>(initialDirection);\n  const directionRef = useRef<DIRECTION>(initialDirection);\n  const snakeCellsSizeRef = useRef<number>(1);\n\n  useEffect(() => {\n    const onKeyDown = (e: KeyboardEvent): void => {\n      const key = e.key.toLocaleLowerCase();\n      if (key === 'a' || key === 'arrowleft') {\n        _setDirection(DIRECTION.LEFT);\n      } else if (key === 'w' || key === 'arrowup') {\n        _setDirection(DIRECTION.UP);\n      } else if (key === 's' || key === 'arrowdown') {\n        _setDirection(DIRECTION.DOWN);\n      } else if (key === 'd' || key === 'arrowright') {\n        _setDirection(DIRECTION.RIGHT);\n      }\n    };\n\n    window.addEventListener('keydown', onKeyDown, true);\n\n    return () => {\n      window.removeEventListener('keydown', onKeyDown);\n    };\n  }, []);\n\n  //   Validates and sets direction\n  const _setDirection = (_direction: DIRECTION, withCheck = true) => {\n    // Handles the case where if snake length is 2, and snake is moving to left, and user decides/misclicks to go opposite -> right, then the game will end and that should not happen\n    if (\n      directionRef.current === getOppositeDirection(_direction) &&\n      snakeCellsSizeRef.current > 1 &&\n      withCheck\n    )\n      return;\n\n    directionRef.current = _direction;\n    setDirection(_direction);\n  };\n\n  return {\n    direction,\n    snakeCellsSizeRef,\n    setDirection: _setDirection,\n  };\n};\n","import { Box, Flex } from '@chakra-ui/layout';\nimport { useDisclosure } from '@chakra-ui/react';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { AvatarBar } from '../components/AvatarBar';\nimport { FoodCell } from '../components/Cells/FoodCell';\nimport { HeadCell } from '../components/Cells/HeadCell';\nimport { StandardCell } from '../components/Cells/StandardCell';\nimport { TailCell } from '../components/Cells/TailCell';\nimport { Controller } from '../components/Controller';\nimport { GameOverModal } from '../components/GameOverModal';\nimport {\n  CREATINE_EFFECT_DURATION,\n  FOOD_DURATION,\n  STEROID_EFFECT_DURATION,\n} from '../consts';\nimport { MainContext } from '../context';\nimport { useCountdown } from '../custom-hooks/useCountdown';\nimport { useSetInterval } from '../custom-hooks/useSetInterval';\nimport { useSnakeMovement } from '../custom-hooks/useSnakeMovement';\nimport { generateRandomNum } from '../utils/generateRandomNum';\nimport { Node, SingleLinkedList } from '../utils/SingleLinkedList';\nimport {\n  getSnakeSpeedOnCreatine,\n  getSnakeSpeedOnRoids,\n} from '../utils/snake/calculateSnakeSpeed';\nimport {\n  getFoodCell,\n  getFoodType,\n  getInitialSnakeCell,\n} from '../utils/snake/initializers';\nimport {\n  changeDirection,\n  getNextNodeForDirection,\n  getOppositeDirection,\n} from '../utils/snake/snake-coordination';\n\nexport type FoodType = 'protein' | 'meat' | 'steroid' | 'creatine';\nexport type CellData = {\n  row: number;\n  cell: number;\n  value: number;\n  direction: DIRECTION;\n};\n\n// values are 0, 1, 2, 3\nexport enum DIRECTION {\n  LEFT,\n  UP,\n  RIGHT,\n  DOWN,\n}\n\nconst Game = () => {\n  // Global game settings\n  const {\n    togglePlayGame,\n    snakeSpeed: initialSnakeSpeed,\n    disableController,\n    board,\n  } = useContext(MainContext);\n  const snakeRef = useRef(\n    new SingleLinkedList(new Node(getInitialSnakeCell(board)))\n  );\n  const [snakeCells, setSnakeCells] = useState(\n    new Set([snakeRef.current.head?.data?.value || 1])\n  );\n  const { direction, setDirection, snakeCellsSizeRef } = useSnakeMovement(\n    snakeRef.current.head!.data!.direction\n  );\n  // TODO: maybe remove setscore since this is equal to snakeCells.size - 1 and snakeCellsRef - 1, and it causes unecessery render\n  const [score, setScore] = useState(0);\n  const [foodCell, setFoodCell] = useState({\n    value: getFoodCell(board),\n    food: getFoodType(),\n  });\n  const steroidConsumedRef = useRef(false);\n  const {\n    count: steroidEffectDuration,\n    resetCount: resetSteroidEffectDuration,\n    cancelCountdown: cancelSteroidEffectDuration,\n    // TODO: onSteroidEffectOver\n  } = useCountdown(0, removeCells);\n  const {\n    count: creatineEffectDuration,\n    resetCount: resetCreatineEffectDuration,\n    cancelCountdown: cancelCreatineEffectDuration,\n  } = useCountdown(0, () => {\n    delete effects.current['creatine'];\n\n    // TODO: onCreatineEffectOver\n    if (!steroidConsumedRef.current && !gameOver) {\n      // Side effects for creatine\n      reverseSnake();\n    }\n  });\n  const {\n    isOpen: gameOver,\n    onOpen: openModal,\n    onClose: closeModal,\n  } = useDisclosure();\n  const {\n    count: foodDuration,\n    resetCount: resetFoodDuration,\n    cancelCountdown: cancelFoodDuration,\n  } = useCountdown(FOOD_DURATION, () => {\n    if (!gameOver) {\n      generateFoodCell();\n      resetFoodDuration();\n    }\n  });\n  const snakeFoodConsumed = useRef<FoodType>();\n  const effects = useRef<{ [food: string]: number | null }>({});\n  const cellRef = useRef<HTMLDivElement | null>(null);\n\n  let snakeSpeed = initialSnakeSpeed;\n  if (steroidConsumedRef.current) {\n    snakeSpeed = getSnakeSpeedOnRoids(snakeSpeed);\n  } else if (\n    snakeFoodConsumed.current === 'creatine' ||\n    creatineEffectDuration\n  ) {\n    snakeSpeed = getSnakeSpeedOnCreatine(snakeSpeed);\n  }\n\n  useSetInterval(() => {\n    if (!gameOver) moveSnake();\n  }, snakeSpeed);\n\n  useEffect(() => {\n    if (\n      steroidEffectDuration &&\n      steroidEffectDuration !== effects.current['steroid']\n    ) {\n      effects.current['steroid'] = steroidEffectDuration;\n    }\n    if (\n      creatineEffectDuration &&\n      creatineEffectDuration !== effects.current['creatine']\n    ) {\n      effects.current['creatine'] = creatineEffectDuration;\n    }\n  }, [steroidEffectDuration, creatineEffectDuration]);\n\n  const snake = snakeRef.current;\n\n  const isOutOfBounds = () => {\n    switch (direction) {\n      case DIRECTION.RIGHT:\n        if (snake.head!.data!.cell + 1 === board[0].length) {\n          gameOverHandler();\n          return true;\n        }\n        break;\n      case DIRECTION.LEFT:\n        if (snake.head!.data!.cell - 1 < 0) {\n          gameOverHandler();\n          return true;\n        }\n        break;\n      case DIRECTION.UP:\n        if (snake.head!.data!.row - 1 < 0) {\n          gameOverHandler();\n          return true;\n        }\n        break;\n      default:\n        // case DIRECTION.DOWN\n        if (snake.head!.data!.row + 1 === board[0].length) {\n          gameOverHandler();\n          return true;\n        }\n        break;\n    }\n    return false;\n  };\n\n  const moveSnake = () => {\n    if (!isOutOfBounds()) {\n      const newNode = getNextNodeForDirection(snake.head!, direction, board);\n\n      // If it's not colliding\n      if (!snakeCells.has(newNode.data!.value)) {\n        const newSnakeCells = changeDirection(newNode, snake, snakeCells);\n\n        const foodConsumed = newNode.data!.value === foodCell.value;\n        if (foodConsumed) {\n          consumeFood(newSnakeCells);\n        }\n\n        snakeCellsSizeRef.current = newSnakeCells.size;\n\n        setSnakeCells(newSnakeCells);\n      } else {\n        openModal();\n      }\n    }\n  };\n\n  const generateFoodCell = () => {\n    // TODO: WRITE ALGORITHAM THAT REMOVES THE VALUES WHERE THE SNAKE IS FROM THE BOARD IT SELF, BECAUSE IF SNAKE GETS TOO BIG IT WILL BE IMPOSSIBLE, LAG TO GENERATE RANDDOM NUM, SINCE THE SNAKE WILL COVER EVERYTHING\n    // Generate food cell at random position\n    let value = getFoodCell(board);\n\n    while (snakeCells.has(value) || value === foodCell.value) {\n      value = getFoodCell(board);\n    }\n\n    let food: FoodType = getFoodType();\n\n    setFoodCell({\n      food,\n      value,\n    });\n  };\n\n  function gameOverHandler() {\n    openModal();\n    cancelFoodDuration();\n\n    // Turn off effects\n    if (steroidConsumedRef.current) {\n      steroidConsumedRef.current = false;\n\n      delete effects.current['steroid'];\n      delete effects.current['creatine'];\n      delete effects.current['meat'];\n      delete effects.current['protein'];\n\n      cancelCreatineEffectDuration();\n      cancelSteroidEffectDuration();\n    }\n  }\n\n  function removeCells() {\n    if (!gameOver) {\n      delete effects.current['steroid'];\n\n      // For roid effect\n      if (steroidConsumedRef.current && snakeCells.size > 1) {\n        console.log(\n          `Mssg to display: You haven't consumed steroids in the last 30 sec, you will shrink`\n        );\n        const newSnakeCells = new Set(snakeCells);\n\n        const removeCellsNumber =\n          newSnakeCells.size - 3 > 1 ? newSnakeCells.size - 3 : 1;\n        while (newSnakeCells.size !== removeCellsNumber) {\n          const removedTail = snake.deque();\n          newSnakeCells.delete(removedTail!.data!.value);\n        }\n\n        setScore(newSnakeCells.size - 1);\n\n        steroidConsumedRef.current = false;\n        setSnakeCells(newSnakeCells);\n      }\n    }\n  }\n\n  function growSnake(newSnakeCells: Set<number>) {\n    const oppositeDirOfTail = getOppositeDirection(snake.tail!.data!.direction);\n    const newTailNode = getNextNodeForDirection(\n      snake.tail!,\n      oppositeDirOfTail,\n      board\n    );\n\n    // After creation of new node make sure the direction is set to the appropriate directiont\n    newTailNode.data!.direction = snake.tail!.data!.direction;\n    // Insertion at beginning of tail\n    const temp = snake.tail;\n    snake.tail = newTailNode;\n    snake.tail.next = temp;\n\n    newSnakeCells.add(newTailNode.data!.value);\n  }\n\n  // Grow the snake and do the effect\n  const consumeFood = (newSnakeCells: Set<number>) => {\n    if (foodCell.food === 'protein' || foodCell.food === 'meat') {\n      growSnake(newSnakeCells);\n\n      effects.current[foodCell.food] = Infinity;\n\n      snakeFoodConsumed.current = 'protein';\n      setScore(score + 1);\n    } else if (foodCell.food === 'creatine') {\n      growSnake(newSnakeCells);\n\n      // Add the effects\n      if (!steroidConsumedRef.current) {\n        reverseSnake();\n        resetCreatineEffectDuration(CREATINE_EFFECT_DURATION);\n\n        // Add the duration\n        effects.current['creatine'] = CREATINE_EFFECT_DURATION;\n      }\n\n      snakeFoodConsumed.current = 'creatine';\n      setScore(score + 1);\n    } else if (foodCell.food === 'steroid') {\n      for (let index = 0; index < 2; index++) {\n        growSnake(newSnakeCells);\n      }\n\n      snakeFoodConsumed.current = 'steroid';\n      steroidConsumedRef.current = true;\n      resetSteroidEffectDuration(STEROID_EFFECT_DURATION);\n\n      setScore(score + 2);\n    }\n\n    resetFoodDuration();\n    // generate new food cell\n    generateFoodCell();\n  };\n\n  // Reset the game to initial state\n  const playAgain = () => {\n    snakeRef.current = new SingleLinkedList(\n      new Node(getInitialSnakeCell(board))\n    );\n\n    // setSnakeCells(new Set([snake.head!.data!.value]));\n    setSnakeCells(new Set([snakeRef.current.head!.data!.value]));\n\n    const newFoodCell = {\n      value: getFoodCell(board),\n      food: getFoodType(),\n    };\n    setFoodCell(newFoodCell);\n    snakeFoodConsumed.current = undefined;\n\n    setDirection(generateRandomNum(0, 3));\n    setScore(0);\n\n    resetFoodDuration();\n\n    closeModal();\n  };\n\n  const effectsArr: { duration: number | null; food: FoodType }[] = [];\n  for (let effect in effects.current) {\n    effectsArr.push({\n      duration: (effects.current as any)[effect] as number | null,\n      food: effect as FoodType,\n    });\n  }\n\n  return (\n    <>\n      <Flex\n        direction='column'\n        align='center'\n        boxShadow='lg'\n        borderRadius='md'\n        border='1px solid #ffffff0a'\n        p={10}\n        bg='primary.main'\n        zIndex={1}\n      >\n        <AvatarBar\n          effects={effectsArr}\n          score={score}\n          untilNextFood={foodDuration}\n        />\n        <Box outline='2px solid white' outlineColor='#2f2828' w='550px'>\n          {board.map((row, index) => (\n            <Flex key={index}>\n              {row.map((cell) => {\n                // Let this be standard cell\n                let cellType: any = null;\n                if (cell === snakeRef.current.head!.data!.value) {\n                  cellType = (\n                    <HeadCell direction={snake.head!.data!.direction} />\n                  );\n                } else if (cell === foodCell.value ? 'violet' : undefined) {\n                  cellType = <FoodCell food={foodCell.food} />;\n                } else if (\n                  snake.tail?.data?.value === cell &&\n                  snake.tail.data.value !== snake.head?.data?.value\n                ) {\n                  const snakeTailDirection = snake.tail!.data!.direction;\n                  const snakeTailNextDirection =\n                    snake.tail?.next?.data?.direction;\n\n                  cellType = (\n                    <TailCell\n                      direction={snakeTailDirection}\n                      nextDirection={snakeTailNextDirection}\n                      // If it will change direction in the next step\n                      isTransitional={\n                        snakeTailDirection !== snakeTailNextDirection\n                      }\n                    />\n                  );\n                } else if (snakeCells.has(cell)) {\n                  const match = snake.find((node) => node.data?.value === cell);\n\n                  const currentDirection = match?.currentNode.data?.direction;\n                  const nextDirection = match?.nextNode?.data?.direction;\n\n                  cellType = (\n                    <StandardCell\n                      direction={currentDirection}\n                      nextDirection={nextDirection}\n                      isTransitional={currentDirection !== nextDirection}\n                    />\n                  );\n                }\n\n                return (\n                  <Box\n                    h={cellRef.current?.clientWidth}\n                    ref={cellRef}\n                    flex={1}\n                    outline='1px solid #2f2828'\n                    key={cell}\n                  >\n                    {cellType}\n                  </Box>\n                );\n              })}\n            </Flex>\n          ))}\n        </Box>\n        {!disableController && (\n          <Controller\n            changeDirection={(_direction: DIRECTION) =>\n              setDirection(_direction)\n            }\n            currentDirection={direction}\n          />\n        )}\n      </Flex>\n      <GameOverModal\n        isOpen={gameOver}\n        onClose={closeModal}\n        score={score}\n        onPlayAgain={playAgain}\n        onMenuClick={togglePlayGame}\n      />\n    </>\n  );\n\n  function reverseSnake() {\n    snake.reverse((reversedNode) => {\n      // Algorithm for determining which node is transitional and adding the right direction to it. Check the SingleLinkedList test case for detailed explanation\n      const nextNodeDirection = reversedNode.next?.data?.direction;\n      const currentNodeDirection = reversedNode.data!.direction;\n      const isTransitional = currentNodeDirection !== nextNodeDirection;\n\n      if (isTransitional && nextNodeDirection !== undefined) {\n        reversedNode.data!.direction = getOppositeDirection(nextNodeDirection);\n      } else {\n        reversedNode.data!.direction = getOppositeDirection(\n          currentNodeDirection\n        );\n      }\n    });\n\n    setDirection(snake.head!.data!.direction, false);\n  }\n};\n\nexport default Game;\n","export const generateRandomNum = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n","import { CellData, FoodType } from '../../containers/Game';\nimport { generateRandomNum } from '../generateRandomNum';\n\n// Now into consideration we have that the rows and column will have same number of rows/columns\nexport const getInitialSnakeCell = (board: number[][]): CellData => {\n  const row = Math.floor(board.length / 2) - 1;\n  const cell = Math.floor(board[row].length / 2) - 1;\n\n  return {\n    row,\n    cell,\n    value: board[row][cell],\n    direction: generateRandomNum(0, 3),\n  };\n};\n\nexport function getFoodCell(board: number[][]) {\n  let row = generateRandomNum(0, board.length - 1);\n  let cell = generateRandomNum(0, board[0].length - 1);\n\n  return board[row][cell];\n}\n\nexport function getFoodType() {\n  const randomNum = Math.random();\n  // 50% to get meat if above 0.25 it's protein else meat\n  let food: FoodType = randomNum > 0.25 ? 'protein' : 'meat';\n  if (randomNum > 0.5 && randomNum < 0.8) {\n    food = 'creatine';\n  } else if (randomNum >= 0.8) {\n    food = 'steroid';\n  }\n  return food;\n}\n","export const getSnakeSpeedOnRoids = (snakeSpeed: number) => {\n  return snakeSpeed * 0.5;\n};\n\nexport const getSnakeSpeedOnCreatine = (snakeSpeed: number) => {\n  return snakeSpeed * 0.8;\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useSetInterval(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import { Flex, UnorderedList, ListItem, Text } from '@chakra-ui/react';\nimport React from 'react';\nimport { FoodType } from '../../containers/Game';\nimport { foodPicker } from '../../utils/foodPicker';\nimport parse from 'html-react-parser';\n\ninterface EffectProps {\n  food: FoodType;\n  rules: string[];\n}\n\nexport const Effect: React.FC<EffectProps> = ({ food, rules }) => {\n  const image = foodPicker(food, {\n    w: '100px',\n    h: '100px',\n  });\n  return (\n    <Flex alignItems='center'>\n      <Flex direction='column' justify='center' alignItems='center' mr={14}>\n        {image}\n        <Text fontWeight='bold' textTransform='capitalize'>\n          {food}\n        </Text>\n      </Flex>\n      <Flex direction='column'>\n        <Text>On consumption:</Text>\n        <UnorderedList listStylePosition='inside' listStyleType='none'>\n          {rules.map((rule, index) => (\n            <ListItem key={index}>{parse(rule)}</ListItem>\n          ))}\n        </UnorderedList>\n      </Flex>\n    </Flex>\n  );\n};\n","import {\n  Box,\n  Heading,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  VStack,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport {\n  CREATINE_EFFECT_DURATION,\n  STEROID_EFFECT_DURATION,\n} from '../../consts';\nimport { Effect } from './Effect';\n\ninterface InstructionsProps {\n  onClose: () => any;\n  isOpen: boolean;\n}\n\nexport const Instructions: React.FC<InstructionsProps> = ({\n  onClose,\n  isOpen,\n}) => {\n  return (\n    <Modal\n      onClose={onClose}\n      size='6xl'\n      isOpen={isOpen}\n      scrollBehavior='inside'\n      returnFocusOnClose={false}\n      autoFocus={false}\n      isCentered\n    >\n      <ModalOverlay />\n      <ModalContent\n        bg='primary.main'\n        color='white'\n        boxShadow='lg'\n        borderRadius='md'\n        border='1px solid #ffffff0a'\n      >\n        <ModalHeader fontSize='3xl'>Instructions</ModalHeader>\n        <ModalCloseButton _active={{}} _focus={{}} />\n\n        <ModalBody\n          css={`\n            ::-webkit-scrollbar-track {\n              -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n              border-radius: 10px;\n            }\n\n            ::-webkit-scrollbar {\n              width: 14px;\n              // background-color: #171717;\n              background-color: black;\n              border-left: 1px solid #3a3232;\n            }\n\n            ::-webkit-scrollbar-thumb {\n              border-radius: 10px;\n              -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n              background-color: #171717;\n            }\n          `}\n        >\n          <Text mb={2}>Basic instrucions for snake game</Text>\n          <Box>\n            <Heading fontSize='2xl' mb={6}>\n              Effects\n            </Heading>\n            <Text style={{ textIndent: '12px' }} mb={4}>\n              There are 4 types of food currently available in this game. Both\n              of those are passive (protein powder and meat) which means they\n              don't cause any effect or side-effect and other 2 that cause\n              effect and side-effect (steroid and creatine). A brief explanation\n              for each food type is provided bellow:\n            </Text>\n            <VStack alignItems='flex-start' spacing={8}>\n              <Effect\n                food='protein'\n                rules={[\n                  '- snake grows for 1 cell',\n                  `- <b>Effect:</b> N/A`,\n                  `- <b>Side-effect:</b> N/A`,\n                  `- <b>Duration:</b> ∞`,\n                  `- <b>Immunity:</b> N/A`,\n                ]}\n              />\n              <Effect\n                food='meat'\n                rules={[\n                  '- snake grows for 1 cell',\n                  `- <b>Effect:</b> N/A`,\n                  `- <b>Side-effect:</b> N/A`,\n                  `- <b>Duration:</b> ∞`,\n                  `- <b>Immunity:</b> N/A`,\n                ]}\n              />\n              <Effect\n                food='creatine'\n                rules={[\n                  '- snake grows for 1 cell',\n                  `- <b>Effect:</b> snake is hyped that it consumed creatine for first time and goes in reverse mode `,\n                  `- <b>Side-effect:</b> if creatine is not consumed in the next ${CREATINE_EFFECT_DURATION} seconds it reverses again`,\n                  `- <b>Duration:</b> ${CREATINE_EFFECT_DURATION} seconds`,\n                  `- <b>Immunity:</b> if snake is under consumtion of steroids, the effects and side-effects from creatine don't affect the snake`,\n                ]}\n              />\n              <Effect\n                food='steroid'\n                rules={[\n                  '- snake grows for 2 cell',\n                  `- <b>Effect</b>: snake grows double the time, but with serious side-effects`,\n                  `- <b>Side-effect</b>: if steroid is not consumed in the next ${STEROID_EFFECT_DURATION} seconds the snake shrinks for 3 cells and hair falls`,\n                  `- <b>Duration:</b> ${STEROID_EFFECT_DURATION} seconds`,\n                  `- <b>Immunity</b>: if snake is under consumtion of steroids, the effects and side-effects from other food types don't affect the snake`,\n                ]}\n              />\n            </VStack>\n          </Box>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import { Flex, HStack, Text } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface SettingProps {\n  settingName: string;\n  children: JSX.Element | JSX.Element[];\n}\n\nexport const Setting: React.FC<SettingProps> = ({ settingName, children }) => {\n  return (\n    <Flex flexDir='column' p={2} pb={4} mb={4}>\n      <Text\n        fontSize='xl'\n        fontWeight='bold'\n        mb={4}\n        textAlign='center'\n        textTransform='uppercase'\n      >\n        {settingName}\n      </Text>\n      <HStack\n        w='100%'\n        justify='center'\n        spacing={8}\n        boxShadow='inner'\n        border='1px solid '\n        borderColor='primary.borderColor'\n        py={4}\n      >\n        {children}\n      </HStack>\n    </Flex>\n  );\n};\n","import { Button } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface SettingsButtonProps {\n  children: string;\n  onClick?: any;\n  isActive?: boolean;\n}\n\nexport const SettingsButton: React.FC<SettingsButtonProps> = ({\n  children,\n  onClick,\n  isActive,\n}) => {\n  return (\n    <Button\n      bg='red.800'\n      w='25%'\n      _hover={{ bg: 'red.700' }}\n      _focus={{}}\n      _active={{}}\n      onClick={onClick}\n      border={isActive ? '1px solid white' : undefined}\n    >\n      {children}\n    </Button>\n  );\n};\n","import {\n  Box,\n  Image,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Slider,\n  SliderFilledTrack,\n  SliderThumb,\n  SliderTrack,\n  Switch,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n} from '@chakra-ui/react';\nimport React, { useContext } from 'react';\nimport { MdGraphicEq } from 'react-icons/md';\nimport {\n  BOARD_SIZE,\n  BOARD_SIZE_HIGH,\n  BOARD_SIZE_MEDIUM,\n  SNAKE_SPEED,\n  SNAKE_SPEED_HIGH,\n  SNAKE_SPEED_MEDIUM,\n} from '../../consts';\nimport { MainContext } from '../../context';\nimport { Setting } from './Setting';\nimport { SettingsButton } from './SettingsButton';\n\ninterface InstructionsProps {\n  onClose: () => any;\n  isOpen: boolean;\n}\n\nexport const Settings: React.FC<InstructionsProps> = ({ onClose, isOpen }) => {\n  const ctx = useContext(MainContext);\n\n  return (\n    <Modal\n      onClose={onClose}\n      size='6xl'\n      isOpen={isOpen}\n      scrollBehavior='inside'\n      returnFocusOnClose={false}\n      autoFocus={false}\n      isCentered\n    >\n      <ModalOverlay />\n      <ModalContent\n        bg='primary.main'\n        color='white'\n        boxShadow='lg'\n        borderRadius='md'\n        border='1px solid #ffffff0a'\n      >\n        <ModalHeader fontSize='3xl'>Settings</ModalHeader>\n        <ModalCloseButton _active={{}} _focus={{}} />\n        <ModalBody>\n          <Tabs colorScheme='red' isFitted>\n            <TabList>\n              <Tab _focus={{}} _active={{}}>\n                GAME SETTINGS\n              </Tab>\n              <Tab _focus={{}} _active={{}}>\n                CONTROLLS\n              </Tab>\n              <Tab _focus={{}} _active={{}}>\n                SOUND\n              </Tab>\n            </TabList>\n\n            <TabPanels>\n              <TabPanel h='464px'>\n                <Setting settingName='SNAKE SPEED:'>\n                  <SettingsButton\n                    onClick={() => ctx.setSnakeSpeed(SNAKE_SPEED)}\n                    isActive={ctx.snakeSpeed === SNAKE_SPEED}\n                  >\n                    LOW\n                  </SettingsButton>\n                  <SettingsButton\n                    onClick={() => ctx.setSnakeSpeed(SNAKE_SPEED_MEDIUM)}\n                    isActive={ctx.snakeSpeed === SNAKE_SPEED_MEDIUM}\n                  >\n                    MEDIUM\n                  </SettingsButton>\n                  <SettingsButton\n                    onClick={() => ctx.setSnakeSpeed(SNAKE_SPEED_HIGH)}\n                    isActive={ctx.snakeSpeed === SNAKE_SPEED_HIGH}\n                  >\n                    HIGH\n                  </SettingsButton>\n                </Setting>\n                <Setting settingName='BOARD SIZE:'>\n                  <SettingsButton\n                    onClick={() => ctx.setBoardSize(BOARD_SIZE)}\n                    isActive={ctx.boardSize === BOARD_SIZE}\n                  >\n                    10 X 10\n                  </SettingsButton>\n                  <SettingsButton\n                    onClick={() => ctx.setBoardSize(BOARD_SIZE_MEDIUM)}\n                    isActive={ctx.boardSize === BOARD_SIZE_MEDIUM}\n                  >\n                    12 X 12\n                  </SettingsButton>\n                  <SettingsButton\n                    onClick={() => ctx.setBoardSize(BOARD_SIZE_HIGH)}\n                    isActive={ctx.boardSize === BOARD_SIZE_HIGH}\n                  >\n                    15 x 15\n                  </SettingsButton>\n                </Setting>\n              </TabPanel>\n              <TabPanel h='464px'>\n                <Setting settingName={'Keybindings for controlling the snake:'}>\n                  <Image src='/img/wasd.png' mr={10} h='160px' />\n                  <Image src='/img/arrs.png' h='160px' />\n                </Setting>\n                <Setting settingName='Disable Controller (not recommended for mobile users)'>\n                  <Switch\n                    size='lg'\n                    onChange={ctx.toggleControllerHandler}\n                    isChecked={ctx.disableController}\n                    colorScheme='red'\n                  />\n                </Setting>\n              </TabPanel>\n              <TabPanel h='464px'>\n                <Setting settingName='General Volume'>\n                  <Slider\n                    aria-label='volume'\n                    defaultValue={ctx.musicVolume * 100}\n                    onChange={(value) => ctx.setMusicVolume(value / 100)}\n                  >\n                    <SliderTrack bg='red.100'>\n                      <SliderFilledTrack bg='tomato' />\n                    </SliderTrack>\n                    <SliderThumb boxSize={6}>\n                      <Box color='tomato' as={MdGraphicEq} />\n                    </SliderThumb>\n                  </Slider>\n                </Setting>\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import {\n  Button,\n  ButtonProps,\n  Flex,\n  Heading,\n  useDisclosure,\n  VStack,\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { Instructions } from '../components/Instructions/Instructions';\nimport { Settings } from '../components/Settings/Settings';\n\ninterface MenuProps {\n  onPlayGame: () => any;\n}\n\nexport const Menu: React.FC<MenuProps> = React.memo(({ onPlayGame }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const {\n    isOpen: isOpenSettings,\n    onOpen: openSettings,\n    onClose: closeSettings,\n  } = useDisclosure();\n\n  const commonButtonStyle: ButtonProps = {\n    w: 'full',\n    bg: '#732c2c',\n\n    _hover: {\n      bg: '#521f1f',\n    },\n\n    _focus: {},\n    _active: {},\n  };\n  return (\n    <Flex\n      direction='column'\n      boxShadow='lg'\n      borderRadius='md'\n      border='1px solid #ffffff0a'\n      p={10}\n      bg='primary.main'\n      zIndex={1}\n      w='80%'\n      maxW='450px'\n    >\n      <Heading textAlign='center' mb={14}>\n        Snake On Roids\n      </Heading>\n      <VStack w='100%' spacing={5}>\n        <Button {...commonButtonStyle} onClick={onPlayGame}>\n          Play Game\n        </Button>\n        <Button {...commonButtonStyle} onClick={onOpen}>\n          Instructions\n        </Button>\n        <Button {...commonButtonStyle} onClick={openSettings}>\n          Settings\n        </Button>\n        <Button w='full' bg='#521f1f' disabled _hover={{ bg: '#521f1f' }}>\n          Multiplayer (SOON)\n        </Button>\n      </VStack>\n      <Instructions isOpen={isOpen} onClose={onClose} />\n      <Settings isOpen={isOpenSettings} onClose={closeSettings} />\n    </Flex>\n  );\n});\n","import { Center } from '@chakra-ui/react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport useSound from 'use-sound';\nimport { CoolBackground } from './components/CoolBackground/CoolBackground';\nimport { MainButtons } from './components/MainButtons';\nimport { BOARD_SIZE, SNAKE_SPEED } from './consts';\nimport Game from './containers/Game';\nimport { Menu } from './containers/Menu';\nimport { MainContext } from './context';\nimport { createBoard } from './utils/createBoard';\n\ntype SettingsType = {\n  boardSize: number;\n  snakeSpeed: number;\n  musicVolume: number;\n  disableController: boolean;\n  mute: boolean;\n};\n\nfunction App() {\n  const [settings, setSettings] = useState<SettingsType>(\n    localStorage.getItem('sor:settings')\n      ? JSON.parse(localStorage.getItem('sor:settings') || '')\n      : {\n          boardSize: BOARD_SIZE,\n          snakeSpeed: SNAKE_SPEED,\n          musicVolume: 1,\n          disableController: false,\n          mute: false,\n        }\n  );\n  // Instead of adding react-router\n  const [playGame, setPlayGame] = useState(false);\n  const [play, { isPlaying, stop }] = useSound('/sound/Main.mp3', {\n    volume: settings.musicVolume,\n  });\n  const [playBlopSound] = useSound('/sound/clicked.ogg', {\n    volume: 0.1,\n  });\n  const playBtnRef = useRef<HTMLButtonElement | null>(null);\n\n  /* eslint-disable */\n  useEffect(() => {\n    if (playBtnRef.current && !settings.mute) {\n      // Play sound on startup\n      const timeout = setTimeout(() => {\n        playBtnRef.current!.click();\n      }, 1000);\n\n      // Cleanup\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, []);\n\n  useEffect(() => {\n    const saveSettings = () => {\n      localStorage.setItem('sor:settings', JSON.stringify(settings));\n    };\n\n    window.addEventListener('beforeunload', saveSettings);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('beforeunload', saveSettings);\n    };\n  }, [settings]);\n\n  const handleSound = () => {\n    playBlopSound();\n    if (isPlaying) {\n      stop();\n      setSettings({ ...settings, mute: true });\n    } else {\n      play();\n      setSettings({ ...settings, mute: false });\n    }\n  };\n\n  let component = <Menu onPlayGame={() => setPlayGame(true)} />;\n  if (playGame) {\n    // TODO: Add the new ctx things into the gameitself\n    component = <Game />;\n  }\n\n  return (\n    <Center minH='100vh' bg='primary.main' color='white' pos='relative'>\n      <CoolBackground />\n      <MainButtons\n        btnRef={playBtnRef}\n        handleSound={handleSound}\n        isPlaying={isPlaying}\n      />\n      <MainContext.Provider\n        value={{\n          boardSize: settings.boardSize,\n          musicVolume: settings.musicVolume,\n          snakeSpeed: settings.snakeSpeed,\n          disableController: settings.disableController,\n          mute: settings.mute,\n          playGame,\n          board: createBoard(settings.boardSize),\n          setBoardSize: (boardSize) => setSettings({ ...settings, boardSize }),\n          setMusicVolume: (musicVolume) =>\n            setSettings({ ...settings, musicVolume }),\n          setSnakeSpeed: (snakeSpeed) =>\n            setSettings({ ...settings, snakeSpeed }),\n          toggleControllerHandler: () =>\n            setSettings({\n              ...settings,\n              disableController: !settings.disableController,\n            }),\n          toggleMute: () => setSettings({ ...settings, mute: !settings.mute }),\n          togglePlayGame: () => setPlayGame(!playGame),\n        }}\n      >\n        {component}\n      </MainContext.Provider>\n    </Center>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendTheme } from '@chakra-ui/react';\n\nconst theme = extendTheme({\n  colors: {\n    primary: {\n      main: '#171717',\n      borderColor: '#ffffff0a',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport theme from './theme';\n\nconst app = (\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>\n);\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lines\":\"CoolBackground_lines__2qbRe\",\"line\":\"CoolBackground_line__1-q6v\",\"drop\":\"CoolBackground_drop__nj691\"};"],"sourceRoot":""}